"""
Django settings for mp3_project project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file.
# It's good practice to place this at the very top of your settings file.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise Exception("SECRET_KEY environment variable is not set!") # Ensure SECRET_KEY is always set

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true' # Converts "True"/"False" strings to boolean


ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'mp3.jaraflix.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', # Make sure this is present for static files
    'mp3_editor',
    'mp3_zipper',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # If you are serving over HTTPS behind a proxy (like Nginx/Apache),
    # consider adding WhiteNoise for static files, but ensure your web server
    # is also configured correctly. For now, rely on web server config.
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # Add this if you want WhiteNoise
]

# If you are using HTTPS behind a reverse proxy (e.g., Nginx, Apache),
# Django needs to know that the original request was secure.
# This prevents issues with CSRF and secure cookies.
# The 'HTTP_X_FORWARDED_PROTO' header is typically set by proxies.
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Force all non-HTTPS requests to redirect to HTTPS
    SECURE_SSL_REDIRECT = True
    # Ensure CSRF cookie is only sent over HTTPS
    CSRF_COOKIE_SECURE = True
    # Ensure session cookie is only sent over HTTPS
    SESSION_COOKIE_SECURE = True
    # Add a security header that prevents some XSS attacks
    X_FRAME_OPTIONS = 'DENY' # Good default, especially for admin

ROOT_URLCONF = 'mp3_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Often include BASE_DIR / 'templates' for project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mp3_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# It's better to always use dj_database_url, even for SQLite,
# and have a consistent DATABASE_URL env var for all environments.
# This makes deployment smoother.
DATABASE_URL_FROM_ENV = os.getenv('DATABASE_URL')

if DATABASE_URL_FROM_ENV:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL_FROM_ENV,
            conn_max_age=600 # Keep connections alive for performance
        )
    }
else:
    # Fallback to SQLite for development if DATABASE_URL is not set
    if DEBUG:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
    else:
        # Absolutely require DATABASE_URL in production
        raise Exception("DATABASE_URL environment variable must be set in production (when DEBUG is False).")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# This is the URL prefix for serving static files in templates.
# Example: <img src="{% static 'images/logo.png' %}"> -> /static/images/logo.png
STATIC_URL = 'static/'

# STATIC_ROOT is the ABSOLUTE path to the directory where `collectstatic` will
# gather all static files from your apps and STATICFILES_DIRS.
# This is the directory that your web server (Nginx/Apache) needs to serve.
# It's good practice to name it something like 'staticfiles_collected' to distinguish
# it from 'static' folders inside apps or in STATICFILES_DIRS.
STATIC_ROOT = BASE_DIR / 'staticfiles_collected' # Using Path object for consistency

# STATICFILES_DIRS is a list of directories where Django's staticfiles app will
# look for additional static files, not necessarily tied to a specific app.
# Your original 'os.path.join(BASE_DIR, 'static')' suggests you have a
# top-level 'static' folder for general project assets. Ensure this directory exists.
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Using Path object for consistency
    # Example: '/home/jaraflix/global_assets', if you have external assets
]


# Media files (user-uploaded content)
# https://docs.djangoproject.com/en/4.2/topics/files/

# MEDIA_ROOT is the ABSOLUTE path to the directory where user-uploaded files will be stored.
# This directory also needs to be served by your web server, but separately from static files.
MEDIA_ROOT = BASE_DIR / 'media' # Using Path object for consistency

# MEDIA_URL is the URL prefix for serving user-uploaded media files.
# Example: <img src="{{ user.profile.image.url }}"> -> /media/profile_pics/user1.jpg
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration (highly recommended for production)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # Log INFO and above to console in production
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if DEBUG else 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log', # Log to a file
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO', # Set to DEBUG for very verbose logs, INFO for general
            'propagate': False,
        },
        'mp3_editor': { # Logger for your specific app
            'handlers': ['console', 'file'],
            'level': 'DEBUG', # You might want more verbose logs for your app
            'propagate': False,
        },
        'mp3_zipper': { # Logger for your specific app
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING', # Default for unhandled log messages
    },
}

# ADMINS and MANAGERS for error emails (production)
# If you want Django to email admins on server errors when DEBUG=False
# ADMINS = [
#     ('Your Name', 'your_email@example.com'),
# ]
# MANAGERS = ADMINS # Managers get messages when BrokenLink emails are sent